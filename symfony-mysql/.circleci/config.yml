version: 2
jobs:
  build:
    working_directory: /var/www/html
    docker:
      - image: composer
    steps:
      - checkout

      - run:
          name: Activate PHP Extensions
          command: |
            docker-php-ext-install pdo pdo_mysql

      - run:
          name: Update composer
          command: composer self-update

      - restore_cache:
          keys:
            - composer-v1-{{ checksum "composer.lock" }}
            - composer-v1-

      - run:
          name: Install vendors
          command: composer install --prefer-dist --no-scripts --no-interaction

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - run: chown -R 82:82 /var/www/html

      - persist_to_workspace:
          root: /var/www/html/
          paths:
            - ./*
  lint:
    working_directory: /var/www/html
    docker:
      - image: php:7.3-cli-alpine

    steps:
      - attach_workspace:
          at: /var/www/html
      - run:
          name: Code Style
          command: |
            vendor/bin/phpcs --config-set ignore_warnings_on_exit 1
            vendor/bin/phpcs


  test:
    working_directory: /var/www/html
    docker:
      - image: php:7.3-cli-alpine
        environment:
          DATABASE_URL: mysql://root:password@127.0.0.1/database
      - image: mysql:5.7
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: database

    steps:
      - attach_workspace:
          at: /var/www/html
      - run:
          name: Install dependencies
          command: |
            docker-php-ext-install pdo pdo_mysql
      - run:
          name: Launch tests
          command: vendor/bin/phpunit

  deploy-staging: &deploy-job
    docker:
      - image: circleci/node:dubnium
        user: root
    working_directory: ~/app

    environment:
      HEROKU_APP: my-app-staging

    steps:
      - checkout

      - run:
          name: Install dpl
          command: |
            apt update
            apt install ruby
            gem install -N dpl

      - run:
          name: Install heroku cli
          command: npm install -g heroku

      - deploy:
          name: Deploy to Heroku
          command: dpl --provider=heroku --app=$HEROKU_APP --api-key=$HEROKU_API_KEY --skip-cleanup=true

      - deploy:
          name: Run migrations
          command: heroku run bin/console doctrine:migrations:migrate -n --allow-no-migration


  deploy-preprod:
    <<: *deploy-job
    environment:
      HEROKU_APP: my-app-preprod


  deploy-prod:
    <<: *deploy-job
    environment:
      HEROKU_APP: my-app-prod


filter-staging: &filter-staging
  filters:
    branches:
      only: master

filter-preprod-prod: &filter-preprod-prod
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /\d+\.\d+\.\d+/

workflows:
  version: 2
  test:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build

  deploy-staging:
    jobs:
      - deploy-staging:
          <<: *filter-staging

  deploy:
    jobs:
      - hold_preprod:
          <<: *filter-preprod-prod
          type: approval
      - deploy-preprod:
          <<: *filter-preprod-prod
          requires:
            - hold_preprod
      - hold_prod:
          <<: *filter-preprod-prod
          type: approval
          requires:
            - deploy-preprod
      - deploy-prod:
          <<: *filter-preprod-prod
          requires:
            - hold_prod
